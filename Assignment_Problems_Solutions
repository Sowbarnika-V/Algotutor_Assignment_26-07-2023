1.Find the duplicate number

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size(),s;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-1;i++){
            if(nums[i]==nums[i+1]){
                s = nums[i];
            }
        }
        return s;
    }
};
2.Number of Good Pairs

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int res=0;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]==nums[j]){
                    res++;
                }
            }
        }
        return res;
    }
};

3.Find the greatest common divisor
class Solution {
public:
    int findGCD(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int s=__gcd(nums[0],nums[n-1]);
        return s;
        
    }
};

4.Unique number of occurrences

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
         unordered_map<int, int> map1;

        
        for(int i=0; i<arr.size(); i++){
            map1[arr[i]]++;
        }

        
        unordered_map<int, int> map2;

        for(auto j = map1.begin(); j != map1.end(); j++){
            map2[j->second]++;
        }

        for(auto k = map2.begin(); k != map2.end(); k++){
            if((k->second) > 1){
                return false;
            }
        }
        return true;
    }
};

5.Find all Duplicates

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
         unordered_map<int, int> map1;

        
        for(int i=0; i<arr.size(); i++){
            map1[arr[i]]++;
        }

        
        unordered_map<int, int> map2;

        for(auto j = map1.begin(); j != map1.end(); j++){
            map2[j->second]++;
        }

        for(auto k = map2.begin(); k != map2.end(); k++){
            if((k->second) > 1){
                return false;
            }
        }
        return true;
    }
};

6.Maximum points you can obtain from cards

class Solution:
    def maxScore(self, cardpoints: List[int], k: int) -> int:
        ans = tot = sum(cardpoints[:k])
        for i in range (k-1, -1, -1):
            tot += cardpoints[i + len(cardpoints) - k] - cardpoints[i]
            ans = max(ans, tot)
        return ans

7.Maximum Gap

class Solution {
public:
    int maximumGap(vector<int>& nums) {
        
        int n = nums.size();
        if(n < 2) return 0;
        
        sort(nums.begin(), nums.end());
        
        int ans = 0;
        
        for(int i = 1; i < n; ++i){
            ans = max(ans, nums[i] - nums[i-1]);
        }
        
        return ans;

    }
};

8.Candy

class Solution {
public:
    int candy(vector<int>& ratings) {
          int n = ratings.size();
        
        vector<int> arr(n, 1);
        
        for(int i = 1; i < n; ++i){
            if(ratings[i] > ratings[i-1]){
                arr[i] = arr[i-1]+1;
            }
        }
        
        for(int i = n-2; i >= 0; --i){
            if(ratings[i] > ratings[i+1]){
                
                arr[i] = max(arr[i], arr[i+1]+1);
            }
        }
        
        return accumulate(arr.begin(), arr.end(), 0);
    
    }
};
